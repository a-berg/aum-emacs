#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* ‡•ê-emacs  config
  
  I will use org-babel right away. The idea of modules as used in Prelude is
  also worth using, as they are simple elisp modules and help to
  compartmentalize the config.
  
  Suggested packages:
    + hydra
    + persp mode
    + yasnippet
    + writeroom
    + iedit?

** Set up

   First of all, configure package repos. This way I can utilize =use-package=
   to configure everything (I like the interface defined by it).
   
   #+begin_src emacs-lisp
     ;; Initialize package sources
     (require 'package)
     (setq-default load-prefer-newer t)

     (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

       ;; Initialize use-package on non-Linux platforms
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (require 'use-package)
     (setq use-package-always-ensure t)

     (setq user-emacs-directory "~/code/personal/aum-emacs/modules")
     (add-to-list 'load-path user-emacs-directory)

     (require 'aum-functions-macros)
   #+end_src

   Now, for some sane defaults...

   #+begin_src emacs-lisp
     (use-package emacs
       :hook ((before-save . delete-trailing-whitespace))
       :config
       ;; default to utf-8 for all the things
       (set-charset-priority 'unicode)
       (setq locale-coding-system 'utf-8)
       (set-terminal-coding-system 'utf-8)
       (set-keyboard-coding-system 'utf-8)
       (set-selection-coding-system 'utf-8)
       (prefer-coding-system 'utf-8)
       (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
       ;; always allow 'y' instead of 'yes'.
       (defalias 'yes-or-no-p 'y-or-n-p)
       ;; Stop Emacs from littering the system with backup files.
       (setq make-backup-files nil
	     auto-save-default nil
	     create-lockfiles nil))
   #+end_src

** GUI/Fonts
   
   I consider GUI settings things like the theme, font style, disabling the menu
   bar etc.
   
   #+begin_src emacs-lisp

     (use-package emacs
       :config
       (setq inhibit-startup-message t
             visible-bell t) ;; hmmmm do I want this?
       ;; Frame size (for early development purposes)
       (setq default-frame-alist
             (append (list
                      '(width . 100)               ;; width (in characters)
                      '(height . 60))))            ;; height (in characters)

       (setq-default fill-column 88)

       (scroll-bar-mode -1)        ; Disable visible scrollbar
       (tool-bar-mode -1)          ; Disable the toolbar
       (tooltip-mode -1)           ; Disable tooltips
       (set-fringe-mode 10)        ; Give some breathing room
       (blink-cursor-mode 0)       ; I hate blinking cursors
       (menu-bar-mode -1)          ; Disable the menu bar

       ;; line numbers!
       (column-number-mode)
       (global-display-line-numbers-mode t)
       (setq-default display-line-numbers-type 'relative
                     display-line-numbers-current-absolute t
                     display-line-numbers-width 3
                     display-line-numbers-widen t)
       (dolist (mode '(term-mode-hook
                       shell-mode-hook
                       eshell-mode-hook))
         (add-hook mode (lambda () (display-line-numbers-mode 0))))
       )
   #+end_src

*** Font
    
    I like [[https://typeof.net/Iosevka/][Iosevka]], variant SS04 (in the future I will need to patch this in
    order to use pretty-symbols. Dammit Emacs, it's 2021 already, we need
    ligature support!!). [[https://madmalik.github.io/mononoki/][Mononoki]] is another beautiful font I sometimes like to
    use. For variable pitch (which I don't really favor in Emacs much), I am
    still deciding between Fira Sans, Cantarell, Open Sans and possibly Roboto
    (there are many good sans fonts to be honest, Lato is another that comes to
    mind).
    
    #+begin_src emacs-lisp
      (defvar aum/default-font-size 120) ;; variable. Maybe use noweb in org or some other config file?
      (use-package emacs
        :config
        (set-face-attribute 'default nil :font "Iosevka SS04" :height aum/default-font-size)
        (set-face-attribute 'fixed-pitch nil :font "Iosevka SS04" :height aum/default-font-size))
      ;; (set-face-attribute 'variable-pitch nil :font "Fira Sans" :height 130 :weight 'regular)
    #+end_src

    All the icons is a need for a modern look. Remember to =M-x
    all-the-icons-install-fonts= the first time!. The issue of automatically
    installing these fonts [[https://github.com/domtronn/all-the-icons.el/issues/120][remains open]] (although with workarounds, but they are
    not universal).

    #+begin_src emacs-lisp
      (use-package all-the-icons)
    #+end_src

*** Theme setup 
    
    I mostly favour the [[https://github.com/mswift42/silkworm-theme][silkworm theme]], although [[https://github.com/vallyscode/cloud-theme][cloud]] and [[https://github.com/bbatsov/solarized-emacs][gruvbox]] (via
    solarized) are favourites of mine. Honorable mentions: [[https://github.com/arcticicestudio/nord-emacs][norf]] (pun intended),
    [[https://github.com/emacsfodder/emacs-theme-darktooth][darktooth]].
    
    I tend to favour light themes nowadays as they feel easier on my eyes (this
    is totally subjective).
    
    #+begin_src emacs-lisp
      (use-package silkworm-theme
        :ensure t
        :config
        (load-theme 'silkworm t))
    #+end_src

*** Modeline

    Doom modeline seems a good option.
    
    #+begin_src emacs-lisp
      (use-package doom-modeline
        :ensure t
        :init (doom-modeline-mode 1)
        :custom ((doom-modeline-height 35)))
    #+end_src
    
* Keybindings

  Most of the keybinding confiuration can be relegated to modules. However, evil
  and general are pretty much needed here.
  
  #+begin_src emacs-lisp
    (use-package emacs
      :config
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit))
  #+end_src
  
*** General

  Let's first configure =general=:

  #+begin_src emacs-lisp
    (use-package general
      :config
      (general-create-definer aum/leader-keys
                              :keymaps '(normal insert visual emacs)
                              :prefix "SPC"
                              :global-prefix "C-SPC"))

    (require 'aum-keybindings)
  #+end_src
  
*** Evil
  
  Even evil has its uses sometimes.

  #+begin_src emacs-lisp
    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))

    (use-package evil-collection
      :after evil
      :ensure t
      :config
      (evil-collection-init))

    (use-package evil-surround
      :ensure t
      :config
      (global-evil-surround-mode 1))

    (use-package evil-commentary
      :ensure t
      :init
      (evil-commentary-mode))
  #+end_src
  
*** Which-key
    
    =which-key= is a pretty essential package to me. Sometimes there are just
    too many things to remember (altough I reckon that M-x can be used in these
    cases, but you need to remember certain keywords).
    
    #+begin_src emacs-lisp
      (use-package which-key
        :ensure t
        :init (which-key-mode)
        :diminish which-key-mode
        :config
        (setq which-key-idle-delay .3))
    #+end_src

* Search

** ivy, counsel, swiper
   
   Always used Helm but I wanna try these now. Btw, do I really need all these
   bindings being defined HERE?
   
   #+begin_src emacs-lisp
     (use-package ivy
       :diminish
       :bind (("C-s" . swiper)
              :map ivy-minibuffer-map
              ("TAB" . ivy-alt-done)
              ("C-l" . ivy-alt-done)
              ("C-j" . ivy-next-line)
              ("C-k" . ivy-previous-line)
              :map ivy-switch-buffer-map
              ("C-k" . ivy-previous-line)
              ("C-l" . ivy-done)
              ("C-d" . ivy-switch-buffer-kill)
              :map ivy-reverse-i-search-map
              ("C-k" . ivy-previous-line)
              ("C-d" . ivy-reverse-i-search-kill))
       :config
       (ivy-mode 1))

     (use-package ivy-rich
       :init
       (ivy-rich-mode 1))

     (use-package counsel
       :bind (("C-M-j" . 'counsel-switch-buffer)
              :map minibuffer-local-map
              ("C-r" . 'counsel-minibuffer-history))
       :config
       (counsel-mode 1))
   #+end_src
    
* OS

  This section will be used for system related stuff, like file manager (dired).
  
* Cursor

  Inspired by Ladicle's way of organizing his/her configuration, this section deals with
  stuff related to the cursor. For example, multiple cursors, avy or ace.

** Multiple Cursors

   #+begin_src emacs-lisp
     (use-package multiple-cursors
       ;; :functions hydra-multiple-cursors
       ;; :bind
       ;; ("M-u" . hydra-multiple-cursors/body)
       ;; :config
       ;; hydra goes here
       )
   #+end_src

** avy/ace

   #+begin_src emacs-lisp :tangle no
     (use-package avy)
     (use-package ace)
   #+end_src

** Move Where I Mean

   #+begin_src emacs-lisp
     (use-package mwim
       :bind
       ("C-a" . mwim-beginning-of-code-or-line)
       ("C-e" . mwim-end-of-code-or-line))
   #+end_src

* TODO Document production
  
** TODO General settings

   Things like flyspell, writeroom mode, or ivy-bibtex.
   
   #+begin_src emacs-lisp :tangle no
     (use-package guess-language         ; Automatically detect language for Flyspell
       ;; :ensure t
       :defer t
       :init (add-hook 'text-mode-hook #'guess-language-mode)
       :config
       (setq guess-language-langcodes '((en . ("en_GB" "English"))
                                        (es . ("es_SP" "Spanish")))
             guess-language-languages '(en es)
             guess-language-min-paragraph-length 45)
       :diminish guess-language-mode)
   #+end_src

** TODO Org
   
   Org has too many configurations. I defer it to modules: =aum-org-basic= for
   basic configuration, then more specialized modules like =aum-org-agenda= and
   =aum-org-exporters=.
   
   #+begin_src emacs-lisp
   (require 'aum-org-basic)
   #+end_src

** Markdown
   
   Possibly the most extended markup language on the internet. Only set up
   minimal settings for now.

   #+begin_src emacs-lisp
     (use-package markdown-mode
       :commands (markdown-mode gfm-mode)
       :mode (("\\.markdown\\'" . markdown-mode)
              ("\\.md\\'"       . markdown-mode)
              ("README\\.md\\'" . gfm-mode))
       :config
       (setq markdown-enable-math nil
             markdown-enable-wiki-links t
             markdown-nested-imenu-heading-index t
             markdown-footnote-location 'immediately
             markdown-use-pandoc-style-yaml-metadata t))
       ;; :hook
       ;; ('markdown-mode-hook . '(lambda ()
       ;;                           ;; (turn-on-flyspell)
       ;;                           ;; (hl-todo-mode)
       ;;                           (auto-fill-mode)
       ;;                           ;; (centered-cursor-mode 1)
       ;;                           (git-gutter-mode 1))))
   #+end_src

** LaTeX
   
   The basic settings for auctex. Take into account that many LaTeX settings are
   being pasted from mclear dotemacs, so further changes will be made in the
   future. This is only the base.
   
   #+begin_src emacs-lisp
     (use-package auctex
       :mode (("\\.tex\\'" . latex-mode)
              ("\\.latex\\'" . latex-mode))
       :commands (latex-mode LaTeX-mode plain-tex-mode)
       :init
       (progn
         (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
         ;; (add-hook 'LaTeX-mode-hook #'flyspell-mode)
         ;; (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
         (setq-default TeX-engine 'xetex)
         (setq TeX-auto-save t
               TeX-parse-self t
               TeX-save-query nil
               TeX-PDF-mode t)
         (setq-default TeX-master nil)))
   #+end_src
   
   Preview latex. These scale settings will need to be tuned, possibly.
   
   #+begin_src emacs-lisp :tangle no
     (use-package preview-mode
       :after auctex
       :commands LaTeX-preview-setup
       :init
       (progn
         (setq-default preview-scale 1.4
                       preview-scale-function '(lambda ()
                                                 (* (/ 10.0 (preview-document-pt))
                                                    preview-scale)))))
   #+end_src
   
   Finally, reftex and bibtex/biblatex support.

   #+begin_src emacs-lisp
     (use-package reftex
       :commands turn-on-reftex
       :init
       (progn
	 (setq reftex-plug-into-AUCTeX t))
       :config
       (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource")))

     (use-package bibtex
       :defer t
       :mode ("\\.bib" . bibtex-mode)
       :init
       (progn
	 (setq bibtex-align-at-equal-sign t)
	 (add-hook 'bibtex-mode-hook (lambda () (set-fill-column 120)))))
   #+end_src
   
   Extra: pdf-tools for better pdf viewing inside emacs.
   
   #+begin_src emacs-lisp
   (pdf-loader-install)
   #+end_src

** pandoc
   
   I like pandoc for document conversion, as it offers several capabilities that other
   workflows lack. For this package I use a minimal setup.
   
   #+begin_src emacs-lisp
     (use-package pandoc-mode
       :ensure t
       :config
       (setq pandoc-use-async t)
       ;; stop pandoc from just hanging forever and not completing conversion
       ;; see https://github.com/joostkremers/pandoc-mode/issues/44
       (setq pandoc-process-connection-type nil)
       (progn
	 (defun run-pandoc ()
	   "Start pandoc for the buffer and open the menu"
	   (interactive)
	   (pandoc-mode)
	   (pandoc-main-hydra/body))
	 (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)))
   #+end_src
   
* Development
  
** lsp
   
*** Basic configuration and setup
   
   . Maybe move this to its own top level header? I might need lsp for LaTeX too.

   #+begin_src emacs-lisp
     (defun aum/lsp-mode-setup ()
       (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
       (lsp-headerline-breadcrumb-mode))

     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :hook (lsp-mode . aum/lsp-mode-setup)
       :init
       (setq lsp-keymap-prefix "C-c l")
       :config
      (lsp-enable-which-key-integration t))
   #+end_src

*** lsp-ui
    
    #+begin_src emacs-lisp
      (use-package lsp-ui
        :after lsp-mode
        :hook (lsp-mode . lsp-ui-mode)
        :commands lsp-ui-mode)
    #+end_src

*** lsp-treemacs
    
    I don't use treemacs much but this is needed for nice symbols in the lsp
    breadcrumb, plus I like the concept of tree views, just not use them much
    now (but may be useful in the future).

    #+begin_src emacs-lisp
      (use-package lsp-treemacs
        :after lsp)
    #+end_src

*** lsp-ivy
    
    #+begin_src emacs-lisp
      (use-package lsp-ivy)
    #+end_src

** Python
   
   LSP needs a language server. I think I will use pyright, as it seems the
   quickest nowadays. Sometimes MS does things right I guess.

   #+begin_src emacs-lisp
     (use-package lsp-pyright
       :ensure t
       :hook (python-mode . (lambda ()
                               (require 'lsp-pyright)
                               (lsp-deferred))))  ; or lsp
   #+end_src
   
*** Anaconda                                                          :FIXME:
    
    Ok so the thing is, I use anaconda for most python development (ML and
    Tensorflow gpu -- nuff said). This means I would like to have some way to
    manage my environments inside ‡•êmacs. Fortunately, there is [[https://github.com/necaris/conda.el][conda.el]].

:FIXME:
tensorflow-gpu works correctly in kaggle env, tfgpu env causes pyright server
error
:END:
    
    #+begin_src emacs-lisp
      (use-package conda
        :config
        ;; Need to do this a bit better, but ~ doesnt work...
        (setq conda-anaconda-home "/home/adrian/miniconda3"
              conda-env-home-directory "/home/adrian/miniconda3"))
    #+end_src

:FEATURE:
I want to add a hook that restarts the LSP server automatically every time I
change envs, but this doesn't work.
#+begin_src emacs-lisp :tangle no
:hook
(conda-env-activate . lsp-workspace-restart)#+end_src
 #+end_src
:END:

    
*** TODO IPython
    Just like anaconda, IPython is fundamental for data science workflow.

* TODO Completion
** TODO Yasnippet
** Company
   
*** Basic configuration and setup
    
    Basically an incredible QOL plugin.

    #+begin_src emacs-lisp
      (use-package company
        :diminish company-mode
        :after lsp-mode
        :hook (lsp-mode . company-mode)
        :bind (:map company-active-map
               ("<tab>" . company-complete-selection))
              (:map lsp-mode-map
               ("<tab>" . company-indent-or-complete-common))
        :custom
        (company-minimum-prefix-length 1)
        (company-idle-delay 0.0))
    #+end_src
   
*** GUI improvements                                                  :FIXME:

    Install company-box to have a nicer completion box.
    Currently broken (doesn't display properly).
    
    =company-box= has the variable =company-box-icons-alist= that can be set to
    =all-the-icons=, which I desire.
    
    #+begin_src emacs-lisp :tangle no
      (use-package company-box
        :diminish company-box-mode
        :hook (company-mode . company-box-mode))
    #+end_src

** Smartparens
   
   Smartparens is a power tool that not only completes pairs of characters but
   also lets you navigate the structure pretty easily.

   #+begin_src emacs-lisp
     (use-package smartparens
       :init
       (smartparens-global-mode)
       :config
       (require 'smartparens-config)
       (sp-pair "=" "=" :actions '(wrap))
       (sp-pair "+" "+" :actions '(wrap))
       (sp-pair "<" ">" :actions '(wrap))
       (sp-pair "$" "$" :actions '(wrap)))
   #+end_src
    
* TODO Productivity
  
** mu4e

* TODO Project

** magit
   
   Magit is probably the thing that hooks me too emacs more than anything (yes,
   even org-mode). I feel extremely handicapped without it now.

   #+begin_src emacs-lisp
     (use-package magit
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+end_src

** forge
   
   Forge is sort of a magit submodule that lets you interact with github, gitlab
   and other git-based online repos through their API. I don't need it now, but
   sometime I will probably want to.
   
   Btw they need tokens for the REST stuff, so see [[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][getting started]] and token creation.
   
   #+begin_src emacs-lisp :tangle no
     (use-package forge)
   #+end_src

** Projectile
   
   #+begin_src emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :config (counsel-projectile-mode 1))
   #+end_src
   
** TODO persp-mode

* Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
